---
- name: Test distribution
  assert:
    that: ansible_os_family == "RedHat"

- include: roles/generic/tasks/install_packages.yml
  tags:
    - install_packages

- name: Create needed folders
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ appuser }}"
  with_items:
    - "{{ download_dir }}"
    - "{{ tools_dir }}"      
    - "{{ build_dir }}"  
    - "{{ opencpu_rpmbuild_dir }}"
    - "{{ opencpu_rpmbuild_sources_dir }}"
    - "{{ opencpu_rpmbuild_specs_dir }}"
  tags:
    - create_folders

- name: Get the rapache sources
  get_url:
    url: "{{ rapache_source_url }}"
    dest: "{{ download_dir }}/{{ rapache_source_local_filename }}"
    mode: 0440
  tags:
    - download_rapache_sources
 
- name: Unarchive rapache spec
  shell: "tar xzvf {{ rapache_source_local_filename }} {{ rapache_spec_path_in_archive }} --strip-components {{ rapache_spec_path_in_archive.split('/') | length - 1 }}"
  args:
    chdir: "{{ download_dir }}/"
  tags:
    - build_rapache

- name: Get rapache archive contents
  shell: "tar tf {{ rapache_source_local_filename }}"
  args:
    chdir: "{{ download_dir }}/"
  register: rapache_archive_contents
  tags:
    - build_rapache

- name: Move files to build folder
  shell: "{{ item }}"
  args:
    chdir: "{{ download_dir }}/"
  with_items:
    - "mv -f {{ rapache_source_local_filename }} {{ opencpu_rpmbuild_sources_dir }}/{{ rapache_archive_contents.stdout_lines[0][:-1] }}.{{ rapache_source_packaging }}"
    - "mv -f {{ rapache_spec_path_in_archive.split('/')[-1] }} {{ opencpu_rpmbuild_specs_dir }}"
  tags:
    - build_rapache

- name: Builds 'rapache' rpm
  shell: "rpmbuild --define '_topdir {{ opencpu_rpmbuild_dir }}' -ba {{ opencpu_rpmbuild_specs_dir }}/{{ rapache_spec_path_in_archive.split('/')[-1] }}"
  args:
    chdir: "{{ opencpu_rpmbuild_dir }}"
  tags:
    - build_rapache

- name: Prepare rapache artifact directory structure
  file:
    path: "{{ download_dir }}/temp{{ ansible_date_time.epoch }}/{{ rapache_artifactId }}-{{ rapache_version }}/{{ rapache_architecture }}"
    state: directory
  register: rapache_artifact_dir
  tags:
    - package_rapache

- name: Get files list for the artifact
  find:
    paths: "{{ rapache_rpmbuild_dir }}/RPMS/{{ rapache_architecture }}"
    recurse: no
    file_type: file
  register: rapache_artifact_files
  tags:
    - package_rapache

- name: Copy files for the rapache artifact
  copy:
    src: "{{ item }}"
    dest: "{{ rapache_artifact_dir.path }}/"
    remote_src: True
  with_items:
    - "{{ rapache_artifact_files | json_query('files[*].path') }}"
  tags:
    - package_rapache      

- name: Create rapache artifact from builded packages
  archive:
    path: 
        - "{{ rapache_artifact_dir.path.split('/')[:-1] | join('/') }}"
    dest: "{{ download_dir }}/rpms-{{ rapache_artifactId }}-{{ rapache_version }}.{{ rapache_packaging }}"
    format: "{{ rapache_packaging.split('.')[-1] }}"
    remove: True
  tags:
    - package_rapache

- name: "Deploy {{ download_dir }}/rpms- {{ rapache_artifactId }}-{{ rapache_version }}.{{ rapache_packaging }} to repository"
  shell: "mvn -q deploy:deploy-file -Dfile={{ download_dir }}/rpms-{{ rapache_artifactId }}-{{ rapache_version }}.{{ rapache_packaging }} -Durl={{ rapache_repo_url }} -DrepositoryId={{ rapache_repositoryId }} -DgroupId={{ rapache_groupId }} -DartifactId={{ rapache_artifactId }} -Dversion={{ rapache_version }} -Dpackaging={{ rapache_packaging }}" 
  tags:
    - deploy_rapache

- name: Remove deployed artifact from local storage
  file:
    path: "{{ download_dir }}/rpms-{{ rapache_artifactId }}-{{ rapache_version }}.{{ rapache_packaging }}"
    state: absent
  tags:
    - deploy_rapache
    - cleanup_rapache  
    - cleanup
          
- name: Get the opencpu sources
  get_url:
    url: "{{ opencpu_source_url }}"
    dest: "{{ download_dir }}/{{ opencpu_source_local_filename }}"
    mode: 0440
  tags:
    - download_opencpu_sources

- name: Unarchive opencpu spec
  shell: "tar xzvf {{ opencpu_source_local_filename }} {{ opencpu_spec_path_in_archive }} --strip-components {{ opencpu_spec_path_in_archive.split('/') | length - 1 }}"
  args:
    chdir: "{{ download_dir }}/"
  tags:
    - build_opencpu

- name: Get archive contents
  shell: "tar tf {{ opencpu_source_local_filename }}"
  args:
    chdir: "{{ download_dir }}/"
  register: opencpu_archive_contents
  tags:
    - build_opencpu

- name: Move files to build folder
  shell: "{{ item }}"
  args:
    chdir: "{{ download_dir }}/"
  with_items:
    - "mv -f {{ opencpu_source_local_filename }} {{ opencpu_rpmbuild_sources_dir }}/{{ opencpu_archive_contents.stdout_lines[0][:-1] }}.{{ opencpu_source_packaging }}"
    - "mv -f {{ opencpu_spec_path_in_archive.split('/')[-1] }} {{ opencpu_rpmbuild_specs_dir }}"
  tags:
    - build_opencpu

- name: Builds 'opencpu' rpm
  shell: "rpmbuild --define '_topdir {{ opencpu_rpmbuild_dir }}' -ba {{ opencpu_rpmbuild_specs_dir }}/{{ opencpu_spec_path_in_archive.split('/')[-1] }}"
  args:
    chdir: "{{ opencpu_rpmbuild_dir }}"
  tags:
    - build_opencpu

- name: Prepare opencpu artifact directory structure"
  file:
    path: "{{ download_dir }}/temp{{ ansible_date_time.epoch }}/{{ opencpu_artifactId }}-{{ opencpu_version }}/{{ opencpu_architecture }}"
    state: directory
  register: opencpu_artifact_dir
  tags:
    - package_opencpu

- name: Get files list for the artifact
  find:  
    paths: "{{ opencpu_rpmbuild_dir }}/RPMS/{{ opencpu_architecture }}"
    recurse: no
    file_type: file
  register: opencpu_artifact_files
  tags:
    - package_opencpu

- name: Copy files for the rapache artifact
  copy:
    src: "{{ item }}"
    dest: "{{ opencpu_artifact_dir.path }}/"
    remote_src: True
    #  with_items:
    #   - "{{ opencpu_artifact_files | json_query('files[*].path') }}"
    with_fileglob:
      - "{{ opencpu_rpmbuild_dir }}/RPMS/{{ opencpu_architecture }}/*"
  tags:
    - package_opencpu

- name: Create an artifact from builded packages
  archive:
    path: 
      - "{{ opencpu_artifact_dir.path.split('/')[:-1] | join('/') }}"
    dest: "{{ download_dir }}/rpms-{{ opencpu_artifactId }}-{{ opencpu_version }}.{{ opencpu_packaging }}" 
    format: "{{ opencpu_packaging.split('.')[-1] }}"
    remove: True
  tags:
    - package_opencpu

- name: "Deploy  {{ download_dir }}/rpms-{{ opencpu_artifactId }}-{{ opencpu_version }}.{{ opencpu_packaging }} to repository"
  shell: "mvn -q deploy:deploy-file -Dfile={{ download_dir }}/rpms-{{ opencpu_artifactId }}-{{ opencpu_version }}.{{ opencpu_packaging }} -Durl={{ opencpu_repo_url }} -DrepositoryId={{ opencpu_repositoryId }} -DgroupId={{ opencpu_groupId }} -DartifactId={{ opencpu_artifactId }} -Dversion={{ opencpu_version }} -Dpackaging={{ opencpu_packaging }}"
  tags:
    - deploy_opencpu

- name: Remove deployed artifact from local storage
  file:
    path: "{{ download_dir }}/rpms-{{ opencpu_artifactId }}-{{ opencpu_version }}.{{ opencpu_packaging }}"
    state: absent
  tags:
    - deploy_opencpu
    - cleanup_rapache
    - cleanup

- name: Clean working directories
  shell: "rm -rf {{ item }}"
  when: 
    - item | length > 10
  with_items:
    - "{{ rapache_artifact_dir.path.split('/')[:-2] | join('/') }}"
    - "{{ opencpu_artifact_dir.path.split('/')[:-2] | join('/') }}"
    - "{{ rapache_rpmbuild_dir }}" 
    - "{{ opencpu_rpmbuild_dir }}" 
  tags:
    - cleanup
